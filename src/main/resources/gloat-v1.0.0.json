{
  "openapi": "3.0.1",
  "info": {
    "title": "Gloat Customer API",
    "description": "This document covers the data models and the APIs exposed by Gloat.\n\nBefore starting out, make sure you have the necessary fields for authenticating to the APIs, namely: your tenant ID and your API key.\n\nPlease note that all these endpoints are subject to quotas and rate limits. Standard API keys are limited to 1,000 calls per day and 100 per hour. If you require more, please contact your Gloat representative. Some endpoints might be marked as costing X credits, which means they count as a multiple of the number of calls they received.\n",
    "contact": {"email": "naama.b@gloat.com"},
    "version": "1.0.0"
  },
  "servers": [
    {"url": "https://api.gloat.com/api/v2"}
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "Meta",
      "description": "Endpoints related to service, authentication and connectivity"
    },
    {
      "name": "User",
      "description": "Employee operations"
    },
    {
      "name": "Job",
      "description": "Positions/requisitions operations"
    },
    {
      "name": "Job Structure",
      "description": "Job structure/architecture operations"
    },
    {
      "name": "Candidacy",
      "description": "Candidacies operations"
    },
    {"name": "Core Entities"},
    {"name": "Search"},
    {
      "name": "Outbound",
      "description": "Hooks to be implemented, which Gloat can be configured to call on certain events. The payloads are defined here; the URLs are to be defined with the implementation specialist or customer success representative."
    }
  ],
  "paths": {
    "/ping": {
      "get": {
        "operationId": "pingCheck",
        "tags": ["Meta"],
        "summary": "Test service availability and authorization",
        "description": "Returns a successful response, if authorization succeeded",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["User"],
        "summary": "Fetch user IDs, optionally filtered by some attributes",
        "description": "Retrieve list of user ID's according to filters",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "User status to filter by",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["AC", "TR", "SU", "AP", "RQ", "IA", "DE"]
              },
              "default": ["AC"]
            }
          },
          {
            "name": "manual",
            "in": "query",
            "required": false,
            "description": "If true, only manually uploaded users will be returned",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "example": "?manual=1"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Return only the user having this exact email address",
            "schema": {"type": "string"},
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "how many users to skip from beginning",
            "schema": {
              "type": "number",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "header",
            "description": "how many users to return (max 1000)",
            "schema": {
              "type": "number",
              "default": 500,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/user_status_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - unknown status | non positive numbers (offset, limit) | limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Received invalid list of statuses"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["User"],
        "summary": "Upsert users",
        "description": "Update or insert users to Gloat - single or bulk",
        "operationId": "user upsert",
        "requestBody": {
          "description": "Gloat users object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/user_object"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/user_response"}
              }
            }
          },
          "201": {
            "description": "single user created",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/user_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Users upsert failed"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": ["User"],
        "summary": "Update existing users",
        "description": "Update user's status or custom fields",
        "operationId": "patchUsers",
        "requestBody": {
          "description": "Gloat users object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/user_patch_object"}
                  },
                  "ignoreTerminationThreshold": {
                    "type": "boolean",
                    "default": false
                  },
                  "maxToTerminate": {
                    "type": "number",
                    "default": 100
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing payload | too many terminations | invalid status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "properties": {
                        "Not found": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "123"
                          }
                        },
                        "Invalid status": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "456"
                          }
                        },
                        "Invalid operation": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "789"
                          }
                        },
                        "Unknown error": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "159"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/activate": {
      "post": {
        "tags": ["User"],
        "summary": "Activate one user",
        "description": "Simulates user onboarding; typically should not be required in real-world scenario as users do it themselves",
        "operationId": "user activate",
        "requestBody": {
          "description": "Gloat users object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "external_id": {"type": "string"}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {"type": "boolean"},
                    "internal_user_id": {"type": "integer"}
                  }
                }
              }
            }
          },
          "400": {"description": "Bad request"},
          "404": {"description": "User not found"}
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/cv": {
      "get": {
        "tags": ["User"],
        "summary": "CV by user",
        "description": "get gloat CV by user and job",
        "operationId": "get gloat CV by user and job",
        "parameters": [
          {
            "name": "vendor",
            "in": "query",
            "description": "job integration vendor",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "job_id",
            "in": "query",
            "description": "job id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "user id",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {"description": "successful operation - (pdf file will be returned)"},
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "missing param user_id"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "couldn't find user"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/groups": {
      "get": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "Paginated users groups",
        "description": "Fetch RBAC groups per user ID, optionally filtered by user_ids/group_types/group_ids, paginated",
        "operationId": "listUsersGroups",
        "parameters": [
          {
            "name": "currentPage",
            "in": "query",
            "description": "Page to return",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of users in page",
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 0,
              "maximum": 1000
            }
          },
          {
            "name": "group_type",
            "in": "query",
            "description": "Group types to filter by (SG: SEGREGATION, AC: ACCESS, TP: TALENT_POOL, OG: OPPORTUNITY_GROUP)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SG",
                  "AC",
                  "TP",
                  "OG"
                ]
              },
              "default": []
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "number",
                      "description": "total number of users",
                      "example": 999
                    },
                    "pageSize": {
                      "type": "number",
                      "description": "page size",
                      "example": 100
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "total number of pages",
                      "example": 10
                    },
                    "currentPage": {
                      "type": "number",
                      "description": "current page",
                      "example": 0
                    },
                    "invalid_ids": {
                      "type": "array",
                      "description": "list of not found user ids",
                      "items": {
                        "type": "string",
                        "example": "inv_id_1"
                      }
                    },
                    "invalid_count": {
                      "type": "number",
                      "description": "number of not found user ids",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "example": {
                          "user_id": "valid_id1",
                          "groups": [
                            {
                              "id": "1",
                              "name": "first group",
                              "type": "TP"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Bad Request: invalid group types"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "Paginated RBAC roles",
        "description": "Fetch paginated RBAC roles of the company",
        "operationId": "listCompanyRoles",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to skip",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit of roles in page",
            "schema": {
              "type": "number",
              "default": 20,
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of the rbac role to filter by",
            "example": "admin",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["admin"]
              }
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "Role ids to filter by",
            "example": "123,1538",
            "schema": {
              "type": "array",
              "items": {"type": "number"}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "roles": {
                      "description": "RBAC roles",
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/rbac_role"}
                    },
                    "count": {
                      "type": "number",
                      "description": "total count of the roles",
                      "example": 100
                    },
                    "pageSize": {
                      "type": "number",
                      "description": "requested size of the page",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "total number of pages",
                      "example": 100
                    },
                    "currentPage": {
                      "type": "number",
                      "description": "current page",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Pagination Params"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/all": {
      "get": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "All RBAC roles",
        "description": "Fetch all RBAC roles of the company",
        "operationId": "listAllCompanyRoles",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category of the rbac role to filter by",
            "example": "admin",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["admin"]
              }
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "Role ids to filter by",
            "example": "123,1538",
            "schema": {
              "type": "array",
              "items": {"type": "number"}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "All RBAC roles",
                  "items": {"$ref": "#/components/schemas/rbac_role"}
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/assignments": {
      "get": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "Paginated RBAC roles assignments",
        "description": "Fetch paginated RBAC roles assignments of the company",
        "operationId": "listRolesAssignments",
        "parameters": [
          {
            "name": "currentPage",
            "in": "query",
            "description": "Offset to skip",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limit of roles in page",
            "schema": {
              "type": "number",
              "default": 20,
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category of the rbac role to filter by",
            "example": "admin",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["admin"]
              }
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "Role ids to filter by",
            "example": "123,1538",
            "schema": {
              "type": "array",
              "items": {"type": "number"}
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "User ids to filter by",
            "example": "1231538,123321",
            "schema": {
              "type": "array",
              "items": {"type": "string"}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "description": "Users with RBAC roles assignments",
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/user_role_assignment"}
                    },
                    "count": {
                      "type": "number",
                      "description": "total count of the roles",
                      "example": 100
                    },
                    "pageSize": {
                      "type": "number",
                      "description": "requested size of the page",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "number",
                      "description": "total number of pages",
                      "example": 100
                    },
                    "currentPage": {
                      "type": "number",
                      "description": "current page",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Pagination Params"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/groups": {
      "get": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "RBAC groups",
        "description": "Fetch all RBAC groups of the company",
        "operationId": "listAllCompanyGroups",
        "parameters": [
          {
            "name": "group_id",
            "in": "query",
            "description": "Group ids to filter by",
            "example": "12,18",
            "schema": {
              "type": "array",
              "items": {"type": "number"}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "All RBAC groups",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 748
                      },
                      "name": {
                        "type": "string",
                        "example": "Function R&D"
                      }
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/grant-roles": {
      "post": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "Grant roles",
        "description": "Grant RBAC roles to users",
        "operationId": "grantRolesToUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/user_roles_and_groups"}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Payload must be a list"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "no such role"
                    },
                    "failedEntry": {
                      "type": "number",
                      "example": 12
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/revoke-roles": {
      "post": {
        "tags": ["RBAC Groups & Roles"],
        "summary": "Revoke roles",
        "description": "Revoke RBAC roles from users",
        "operationId": "revokeRolesFromUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/user_roles_and_groups"}
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Payload must be a list"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "no such role"
                    },
                    "failedEntry": {
                      "type": "number",
                      "example": 12
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Invalid request method",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid Request Method"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/skills": {
      "post": {
        "tags": ["Skills"],
        "summary": "Skills by users IDs",
        "description": "Post skills to gloat",
        "operationId": "postSkills",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vendor": {
                    "type": "string",
                    "example": "vendor"
                  },
                  "ontologyName": {
                    "type": "string",
                    "example": "ontology"
                  },
                  "entities": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/post_skill"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {"description": "successful operation"},
          "400": {"description": "bad request"},
          "500": {"description": "internal problem"}
        }
      }
    },
    "/user-skills": {
      "get": {
        "tags": ["User Skills"],
        "summary": "Get skills of users by providing user id's",
        "operationId": "getUserSkills",
        "parameters": [
          {
            "name": "user_ids",
            "description": "string with comma separated list of ids",
            "in": "query",
            "schema": {"type": "string"},
            "example": "id1,id2",
            "required": true
          },
          {
            "name": "emails",
            "description": "string with comma separated list of emails, only if user_ids not provided",
            "in": "query",
            "schema": {"type": "string"},
            "example": "email1@at.com,email2@at.com"
          },
          {
            "name": "ontology",
            "description": "either a valid ontology or an empty string",
            "in": "query",
            "schema": {"type": "string"},
            "required": true
          },
          {
            "name": "purpose",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "top_skills",
                "desired_skills"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/skill_for_all_ontologies"}
                    }
                  }
                }
              }
            }
          },
          "400": {"description": "bad request"},
          "500": {"description": "internal problem"}
        }
      },
      "post": {
        "tags": ["User Skills"],
        "summary": "Change the list of top skills or desired skills for user",
        "description": "__In planning__ The 'name' property of the skills is optional and ignored.",
        "operationId": "postUserSkills",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vendor": {
                    "type": "string",
                    "example": "vendor"
                  },
                  "ontology": {
                    "type": "string",
                    "example": "ontology"
                  },
                  "purpose": {
                    "type": "string",
                    "enum": [
                      "top_skills",
                      "desired_skills"
                    ]
                  },
                  "by_email": {
                    "type": "boolean",
                    "default": false,
                    "description": "whether to look up users by email or by external id"
                  },
                  "users_skills": {"$ref": "#/components/schemas/user_skills"}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {"description": "successful operation"},
          "400": {"description": "bad request"},
          "404": {"description": "could not find users"},
          "500": {"description": "internal problem"}
        }
      }
    },
    "/jobs/desired": {
      "get": {
        "tags": ["Job"],
        "summary": "Get users and their desired roles",
        "description": "users and desired roles",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "schema": {"type": "string"},
            "description": "a specific external user id to get desired roles for"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {"type": "integer"},
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {"type": "integer"},
            "description": "The offest of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userId": {"type": "string"},
                          "desiredRoles": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {"type": "integer"},
                                "name": {"type": "string"}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": ["Projects & Projects Roles"],
        "summary": "List projects api",
        "description": "list projects",
        "parameters": [
          {
            "in": "query",
            "name": "projectId",
            "schema": {"type": "string"},
            "description": "a specific project external id to get"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {"type": "integer"},
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {"type": "integer"},
            "description": "The offest of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {"type": "string"},
                          "startDate": {"type": "string"},
                          "dateCreated": {"type": "integer"},
                          "description": {"type": "string"},
                          "owner": {
                            "type": "object",
                            "properties": {
                              "id": {"type": "string"},
                              "role": {"type": "string"},
                              "name": {"type": "string"},
                              "fullName": {"type": "string"},
                              "firstName": {"type": "string"},
                              "title": {"type": "string"},
                              "email": {"type": "string"},
                              "status": {"type": "string"},
                              "lastName": {"type": "string"}
                            }
                          },
                          "status": {"type": "string"},
                          "name": {"type": "string"},
                          "owners": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {"type": "string"},
                                "name": {"type": "string"},
                                "status": {"type": "string"},
                                "role": {"type": "string"},
                                "fullName": {"type": "string"},
                                "firstName": {"type": "string"},
                                "lastName": {"type": "string"},
                                "title": {"type": "string"},
                                "email": {"type": "string"}
                              }
                            }
                          },
                          "company": {
                            "type": "object",
                            "properties": {
                              "id": {"type": "integer"},
                              "name": {"type": "string"}
                            }
                          },
                          "type": {"type": "string"},
                          "location": {
                            "type": "object",
                            "properties": {
                              "name": {"type": "string"},
                              "lng": {"type": "integer"},
                              "id": {"type": "string"},
                              "displayName": {"type": "string"},
                              "lat": {"type": "integer"},
                              "type": {"type": "string"},
                              "country": {"type": "string"},
                              "provider": {"type": "string"},
                              "realId": {"type": "integer"}
                            }
                          },
                          "locations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "provider": {"type": "string"},
                                "lat": {"type": "integer"},
                                "lng": {"type": "integer"},
                                "id": {"type": "string"},
                                "country": {"type": "string"},
                                "displayName": {"type": "string"},
                                "realId": {"type": "integer"},
                                "name": {"type": "string"},
                                "type": {"type": "string"}
                              }
                            }
                          },
                          "relocation": {"type": "string"},
                          "video": {
                            "type": "object",
                            "properties": {
                              "url": {"type": "string"},
                              "dateUpdated": {"type": "string"}
                            }
                          },
                          "endDate": {"type": "string"},
                          "impact": {"type": "string"},
                          "coverImage": {"type": "string"},
                          "locationLimitation": {"type": "string"},
                          "priority": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects & Projects Roles"],
        "summary": "Bulk project api",
        "description": "Bulk create or update projects",
        "operationId": "project update or create",
        "requestBody": {
          "description": "Gloat project object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/project_object"}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "payload": {"type": "object"},
                          "error": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Projects & Projects Roles"],
        "summary": "Bulk project patch api",
        "description": "Bulk projects patching, for updating status",
        "operationId": "project update status",
        "requestBody": {
          "description": "Gloat project status object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "project_id": {"type": "string"},
                    "status": {"$ref": "#/components/schemas/job_status"}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "succesful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "payload": {"type": "object"},
                          "error": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/roles": {
      "get": {
        "tags": ["Projects & Projects Roles"],
        "summary": "List projects roles api",
        "description": "list projects roles",
        "parameters": [
          {
            "in": "query",
            "name": "jobId",
            "schema": {"type": "string"},
            "description": "a specific project role external id to get"
          },
          {
            "name": "vendor",
            "in": "query",
            "description": "job integration vendor",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "name": "status",
            "in": "query",
            "description": "Job status to filter by:\n  * `OP` - open\n  * `CL` - close\n  * `CA` - closed for applications\n  * `PE` - pending\n  * `IN` - invisible\n  * `PA` - open pending approval\n  * `DE` - deleted\n  * `AR` - archived\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "OP",
                  "CL",
                  "CA",
                  "PE",
                  "IN",
                  "PA",
                  "DE",
                  "AR"
                ]
              },
              "default": ["OP"]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {"type": "integer"},
            "description": "The numbers of items to return"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {"type": "integer"},
            "description": "The offest of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_detail_object"}
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects & Projects Roles"],
        "summary": "Bulk project role api",
        "description": "Bulk create or update project roles",
        "operationId": "project role update or create",
        "requestBody": {
          "description": "Gloat project role object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/project_role_object"}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "payload": {"type": "object"},
                          "error": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Projects & Projects Roles"],
        "summary": "Bulk project role patch api",
        "description": "Bulk project roles patching, for updating status",
        "operationId": "project role update status",
        "requestBody": {
          "description": "Gloat project role status object",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "project_id": {"type": "string"},
                    "job_id": {"type": "string"},
                    "status": {"$ref": "#/components/schemas/job_status"}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "payload": {"type": "object"},
                          "error": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "post": {
        "tags": ["Job"],
        "summary": "Upsert job",
        "description": "Update or insert jobs in Gloat",
        "operationId": "job upsert",
        "requestBody": {
          "description": "Gloat job object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "jobs",
                  "vendor"
                ],
                "properties": {
                  "jobs": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/job_object"}
                  },
                  "vendor": {"type": "string"}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "created": {
                      "type": "number",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_response"}
              }
            }
          },
          "400": {
            "description": "data params problem",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unable to parse job"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": ["Job"],
        "summary": "Set jobs status by id",
        "description": "Update jobs status by ids",
        "operationId": "job patch",
        "requestBody": {
          "description": "Gloat job object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vendor": {"type": "string"},
                  "jobs": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/job_patch_object"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"type": "object"}
              }
            }
          },
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "example": {
                        "Success": [
                          "id1",
                          "id2"
                        ],
                        "Invalid input": ["id3"],
                        "Not found": ["id4"],
                        "Unknown error": ["id5"]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/jobs/status": {
      "get": {
        "tags": ["Job"],
        "summary": "Job IDs by status",
        "description": "Retrieve list of Job ID's by list of statuses",
        "operationId": "get job by status",
        "parameters": [
          {
            "name": "vendor",
            "in": "query",
            "description": "job integration vendor",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "name": "status",
            "in": "query",
            "description": "Job status to filter by:\n  * `OP` - open\n  * `CL` - close\n  * `CA` - closed for applications\n  * `PE` - pending\n  * `IN` - invisible\n  * `PA` - open pending approval\n  * `DE` - deleted\n  * `AR` - archived\n",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "OP",
                  "CL",
                  "CA",
                  "PE",
                  "IN",
                  "PA",
                  "DE",
                  "AR"
                ]
              },
              "default": ["OP"]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "how many jobs to skip from beginning",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          },
          {
            "name": "limit",
            "in": "header",
            "description": "how many jobs to return (max 1000)",
            "schema": {
              "type": "number",
              "default": 500,
              "minimum": 1,
              "maximum": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_detail_object"}
              }
            }
          },
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "invalid list of status to check"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ,
    "/job-structures": {
      "post": {
        "tags": ["Job Structure"],
        "summary": "Upsert job structure",
        "description": "Update or insert job structure in Gloat",
        "operationId": "job structure upsert",
        "requestBody": {
          "description": "Gloat job structure object",
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/job_structure_object"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful update operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_structure_response"}
              }
            }
          },
          "201": {
            "description": "successful insert operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_structure_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid job structure data",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/job_structure_error_response"}
              }
            }
          }
        }
      }
    },
    "/candidacies": {
      "post": {
        "tags": ["Candidacy"],
        "summary": "Upsert candidacy",
        "description": "Update or insert a candidacy in Gloat",
        "operationId": "candidacy upsert",
        "requestBody": {
          "description": "Gloat candidacy object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allowInsert": {
                    "type": "boolean",
                    "default": true,
                    "description": "If true, candidacy will be created if missing. If false, will be ignored and treated as success."
                  },
                  "suppressRejectionEmail": {
                    "type": "boolean",
                    "default": true,
                    "description": "If false and the update triggers the creation of a rejection action, then Gloat will send a rejection notice to the candidate. If true, a rejection notice will not be sent."
                  }
                },
                "oneOf": [
                  {
                    "type": "object",
                    "required": ["vendor"],
                    "properties": {
                      "vendor": {
                        "type": "string",
                        "example": "vendor"
                      },
                      "new_external_id": {
                        "type": "string",
                        "description": "updates external id only for existing candidate"
                      }
                    }
                  },
                  {"$ref": "#/components/schemas/candidacy_data_object"}
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful operation - candidacy created",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/candidacy_response"}
              }
            }
          },
          "200": {
            "description": "successful operation - candidacy updated",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/candidacy_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters | invalid candidacy structure data | invalid status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unable to parse candidacy"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "user or job of candidacy does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "User does not exist"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "internal server problem",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": ["Candidacy"],
        "summary": "Update candidacy data",
        "description": "Update candidacy data by ids",
        "operationId": "candidacy patch",
        "requestBody": {
          "description": "List of Gloat candidacy objects",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vendor": {
                    "type": "string",
                    "example": "vendor"
                  },
                  "candidacies": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "candidacy_status": {"$ref": "#/components/schemas/candidacy_status_object"}
                          }
                        },
                        {"$ref": "#/components/schemas/candidacy_id_data"}
                      ]
                    }
                  },
                  "suppressRejectionEmail": {
                    "description": "If false and the update triggers the creation of a rejection action, then Gloat will send a rejection notice to the candidate. If true, a rejection notice will not be sent.",
                    "type": "string",
                    "default": "true"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"type": "object"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload | invalid candidacy structure data | invalid status | candidacy not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "results": {
                          "type": "object",
                          "properties": {
                            "Success": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": [
                                  "id1",
                                  "id2"
                                ]
                              }
                            },
                            "Invalid input": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "id3"
                              }
                            },
                            "Not found": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "id4"
                              }
                            },
                            "Unknown error": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "example": "id5"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "error": {
                          "type": "string",
                          "example": "Unable to parse payload"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": ["Candidacy"],
        "summary": "Get candidacy data",
        "description": "get candidacy data by id",
        "operationId": "candidacy get",
        "parameters": [
          {
            "name": "vendor",
            "in": "query",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "candidacy_id",
            "description": "required 1 of - candidacy_id | job_id & user_id | external_id",
            "in": "query",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "name": "job_id",
            "description": "required 1 of - candidacy_id | job_id & user_id | external_id",
            "in": "query",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "name": "user_id",
            "description": "required 1 of - candidacy_id | job_id & user_id | external_id",
            "in": "query",
            "required": false,
            "schema": {"type": "string"}
          },
          {
            "name": "external_id",
            "description": "required 1 of - candidacy_id | job_id & user_id | external_id",
            "in": "query",
            "required": false,
            "schema": {"type": "string"}
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/candidacy_outbound_object_get"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload | invalid candidacy structure data | invalid status | candidacy not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Not found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/candidacies/status": {
      "get": {
        "tags": ["Candidacy"],
        "summary": "Candidacy IDs by status",
        "description": "Retrieve list of candidacies by given status",
        "operationId": "get candidacy IDs by status",
        "parameters": [
          {
            "name": "vendor",
            "in": "query",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "apply",
                "match",
                "reject",
                "invited-to-interview",
                "interview",
                "on-hold",
                "advanced",
                "phone-approach",
                "email-approach",
                "offer",
                "hired",
                "withdrew"
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {"type": "integer", "default": 0},
            "description": "how many candidacies to skip from beginning"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "how many candidacies to return (max 1000)",
            "schema": {"type": "integer", "default": 200}
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "Retrieve candidacies whose status last changed date equal or greater than received date",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "YYYY-MM-DD",
              "example": "2022-05-01"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "Retrieve candidacies whose status last changed date equal or less than received date. Must be provided with start_date (max days range is 62)",
            "schema": {
              "type": "string",
              "format": "date",
              "pattern": "YYYY-MM-DD",
              "default": "2024-03-29"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/candidacy_status_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payload | missing required params | invalid status | invalid vendor | non positive numbers (offset, limit) | limit exceeded max | invalid date format or input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "received invalid status, status: <invalid_status>"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "internal server problem",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "post": {
        "tags": ["Core Entities"],
        "summary": "Insert locations (bulk)",
        "description": "Create locations (a.k.a. sites)",
        "operationId": "location bulk insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["locations"],
                "type": "object",
                "properties": {
                  "locations": {
                    "type": "array",
                    "description": "Array of location objects",
                    "items": {"$ref": "#/components/schemas/location_object"}
                  },
                  "updateExisting": {
                    "type": "boolean",
                    "description": "If true, existing location IDs would be updated to reflect the latest info. If false, only new locations would be created, but existing ones would not be updated even if their information is different.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "stats": {
                      "type": "object",
                      "example": {
                        "preexisting": 3,
                        "newly_mapped": 10,
                        "existed": 2,
                        "failed": 1,
                        "invalid_countries": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "locations"
      }
    },
    "/functions": {
      "post": {
        "tags": ["Core Entities"],
        "summary": "Insert functions (bulk)",
        "description": "Create functions and sub-functions",
        "operationId": "function bulk insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "functions": {
                    "type": "array",
                    "description": "Array of function objects",
                    "items": {"$ref": "#/components/schemas/function_object"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "stats": {
                      "type": "object",
                      "example": {
                        "preexisting_functions": 5,
                        "preexisting_subfunctions": 30,
                        "received": 1,
                        "received_existing": 1,
                        "created": 1,
                        "updated_name": 3,
                        "parent": 4,
                        "updated": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "functions"
      }
    },
    "/opportunities/matching": {
      "get": {
        "tags": ["Search"],
        "summary": "Opportunity recommendations for an end-user",
        "description": "__In planning__\nquota: Costs 5 credits.\n",
        "operationId": "opportunities-personalized",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "ID of user for whom recommendations are to be provided",
            "schema": {
              "type": "string",
              "example": "ABC123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/search_response"}
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": ["Search"],
        "summary": "Search for various entities",
        "description": "Return short descriptions of entities (jobs, roles, people) according\nto a free textual query\nQuota: Costs 5 credits.\n",
        "operationId": "search by keyword",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "The user's id",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "query",
            "in": "query",
            "description": "Text to search for (max 200 characters)",
            "required": true,
            "schema": {"type": "string"}
          },
          {
            "name": "language code",
            "in": "query",
            "description": "Language of entities to return. Entities will be returned only in this language and in English.",
            "schema": {
              "type": "string",
              "default": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/components/schemas/search_response"}
              }
            }
          },
          "400": {
            "description": "Bad request - missing user id | missing user | missing search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "triggered a search without a external user id"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Bad request - not authorized user | language not available",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "language not available"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/outbound-post-candidate": {
      "post": {
        "tags": ["Outbound"],
        "summary": "Candidacy insert or update",
        "description": "Called when a new candidacy is created, or when its status is updated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {"$ref": "#/components/schemas/candidacy_outbound_object_post"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation. If external_id is returned in the json response, Gloat will use this ID as 'external_id' in future calls to updates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "external_id": {"type": "string"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/outbound-userskills": {
      "get": {
        "tags": ["Outbound"],
        "summary": "Skills by user ID",
        "description": "__In planning__ Used by Gloat to synchronize the list of top skills or desired skills entered by the user on another platform.",
        "operationId": "getUserSkillsOutbound",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {"type": "string"}
          },
          {
            "name": "purpose",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topSkills",
                "desiredSkills"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skills": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/skill"}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Outbound"],
        "summary": "Change the list of top skills or desired skills for user (following a change made in Gloat)",
        "description": "__In planning__",
        "operationId": "postUserSkillsOutbound",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skills": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/skill"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "schema": {"type": "string"}
          },
          {
            "name": "purpose",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "topSkills",
                "desiredSkills"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "skills": {
                      "type": "array",
                      "items": {"$ref": "#/components/schemas/skill"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user_profile/positions": {
      "post": {
        "tags": ["User Profile"],
        "summary": "Insert user positions",
        "description": "Returns insertion details as a successful response",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "example": {
                        "num_of_users": 1,
                        "num_of_new_items": 0,
                        "invalid_users": ["502627778"]
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "successful operation - positions were created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "example": {
                        "num_of_users": 2,
                        "num_of_new_items": 4,
                        "invalid_users": ["502627778"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "integration failed, missing users_data",
            "content": {}
          }
        }
      }
    },
    "/user_profile/training": {
      "post": {
        "tags": ["User Profile"],
        "summary": "Insert user training records",
        "description": "Upload training records for user profile",
        "requestBody": {
          "description": "Object with ids as keys and array of records as a value",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_training": {
                    "type": "object",
                    "properties": {
                      "<user_id>": {
                        "type": "array",
                        "description": "Array of training objects",
                        "items": {"$ref": "#/components/schemas/training"}
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Upload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "training_result": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "stats": {
                          "type": "object",
                          "example": {
                            "total_training_records": 2,
                            "training_created": 1,
                            "training_failed": 1,
                            "total_num_of_users": 2,
                            "invalid_users": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Integration failed, missing data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Training upload failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user_profile/education": {
      "post": {
        "tags": ["User Profile"],
        "summary": "Insert user education",
        "description": "Returns insertion details as a successful response",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "example": {
                        "num_of_users": 1,
                        "num_of_new_items": 0,
                        "invalid_users": ["502623875"]
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "successful operation - education items were created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "object",
                      "example": {
                        "num_of_users": 1,
                        "num_of_new_items": 2,
                        "users_with_existing_items": ["502623875"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "integration failed, missing user_education",
            "content": {}
          }
        }
      }
    },
    "/learning": {
      "post": {
        "tags": ["Learning"],
        "summary": "Upsert learning items (courses, curriculums etc) for consumption by users",
        "description": "Insert or update learning opportunities in Gloat",
        "operationId": "opportunities-post",
        "requestBody": {
          "description": "List of learning items",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "learning_items": {
                    "type": "array",
                    "description": "Array of learning-item objects",
                    "items": {"$ref": "#/components/schemas/learning_item"}
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "stats": {
                      "type": "object",
                      "example": {
                        "learning_created": 1,
                        "learning_updated": 0,
                        "learning_failed": 1,
                        "failed_ids": ["ed122"],
                        "succeeded_ids": ["ed123"]
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "successful operation - single learning created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Learning items upsert failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Learning"],
        "summary": "Returns all learning item external ids with the provided statuses",
        "description": "Get all learning items with matching external ids",
        "operationId": "learning-get",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "description": "Learning item statuses to filter by",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "OP",
                  "CL"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "hasMore": {
                      "type": "boolean",
                      "example": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "external_id": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Request not well defined"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Learning"],
        "summary": "Update learning items status",
        "description": "Provide a list of identifying objects and the status to change them to",
        "operationId": "learning-patch",
        "requestBody": {
          "description": "List of learning items",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Array of learning-item identifiers, and the status to change them to",
                    "items": {
                      "type": "object",
                      "properties": {
                        "item_id": {
                          "type": "string",
                          "example": "item_id"
                        },
                        "vendor": {
                          "type": "string",
                          "example": "vendor_name"
                        },
                        "item_source": {
                          "type": "string",
                          "example": "source_name"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "OP",
                            "CL"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "item_id": {
                            "type": "string",
                            "example": "item_id"
                          },
                          "vendor": {
                            "type": "string",
                            "example": "vendor_name"
                          },
                          "item_source": {
                            "type": "string",
                            "example": "source_name"
                          },
                          "success": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Request not well defined"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/job-architecture/alternative-titles": {
      "get": {
        "tags": ["Job Architecture"],
        "summary": "Returns alternative titles for job code",
        "description": "Get max 20 alternative titles for job code",
        "operationId": "alternative-titles-get",
        "parameters": [
          {
            "name": "job_code",
            "in": "query",
            "required": true,
            "description": "Job code to return alternative titles for it",
            "style": "form",
            "schema": {"type": "string"}
          },
          {
            "name": "industries",
            "in": "query",
            "required": false,
            "description": "Industries to filter alternative titles by",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {"type": "string"}
            }
          },
          {
            "name": "countries",
            "in": "query",
            "required": false,
            "description": "Countries to filter alternative titles by",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {"type": "string"}
            },
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alternative_titles": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "job title"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "integration failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "language_dict": {
        "type": "object",
        "required": [
          "title",
          "description"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Software Developer"
          },
          "description": {"type": "string"},
          "description_html": {"type": "string"}
        }
      },
      "location_object": {
        "type": "object",
        "required": [
          "external_id",
          "source",
          "is_active",
          "is_remote"
        ],
        "properties": {
          "external_id": {
            "type": "string",
            "example": "id123"
          },
          "source": {
            "type": "string",
            "example": "workday"
          },
          "is_active": {
            "type": "boolean",
            "example": true
          },
          "is_remote": {
            "type": "boolean",
            "example": false
          },
          "display_name": {
            "type": "string",
            "example": "London, UK"
          },
          "city": {
            "type": "string",
            "example": "London"
          },
          "country": {
            "type": "string",
            "example": "England"
          },
          "country_code": {
            "type": "string",
            "example": "UK"
          },
          "state": {"type": "string"},
          "region": {"type": "string"},
          "googlable_name": {"type": "string"}
        }
      },
      "function_object": {
        "type": "object",
        "required": [
          "id",
          "name",
          "parent_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "id123"
          },
          "name": {
            "type": "string",
            "example": "function"
          },
          "parent_id": {
            "type": "string",
            "example": "pid123"
          }
        }
      },
      "candidacy_data_object": {
        "title": "Candidacy",
        "type": "object",
        "oneOf": [
          {"$ref": "#/components/schemas/candidacy_id_data"},
          {
            "type": "object",
            "properties": {
              "candidacy_status": {"$ref": "#/components/schemas/candidacy_status_object"},
              "user_data": {"$ref": "#/components/schemas/basic_user_object"},
              "actions": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/candidacy_action"}
              }
            }
          }
        ]
      },
      "candidacy_id_data": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "candidacy_id": {"type": "string"}
            },
            "required": ["candidacy_id"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "job_id": {"type": "string"},
              "user_id": {"type": "string"}
            },
            "required": [
              "job_id",
              "user_id"
            ],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "external_id": {"type": "string"}
            },
            "required": ["external_id"],
            "additionalProperties": false
          }
        ]
      },
      "candidacy_outbound_object_post": {
        "type": "object",
        "title": "Candidacy",
        "properties": {
          "candidacy_id": {"type": "string"},
          "external_id": {"type": "string"},
          "job_id": {"type": "string"},
          "user_id": {"type": "string"},
          "candidacy_status": {"$ref": "#/components/schemas/candidacy_status_object"},
          "user_data": {"$ref": "#/components/schemas/basic_user_object"},
          "actions": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/candidacy_action"}
          }
        }
      },
      "candidacy_outbound_object_get": {
        "type": "object",
        "title": "Candidacy",
        "properties": {
          "candidacy_id": {"type": "string"},
          "external_id": {"type": "string"},
          "job_id": {"type": "string"},
          "user_id": {"type": "string"},
          "candidacy_status": {"$ref": "#/components/schemas/candidacy_status_object_get"},
          "user_data": {"$ref": "#/components/schemas/basic_user_object"}
        }
      },
      "candidacy_action": {
        "type": "object",
        "title": "Candidacy Action",
        "properties": {
          "action": {
            "type": "string",
            "example": "CL",
            "description": "candidacy action (2 letter code)"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "candidacy_response": {
        "type": "object",
        "properties": {
          "success": {"type": "boolean"}
        }
      },
      "candidacy_status_response": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 1
          },
          "hasMore": {
            "type": "boolean",
            "example": false
          },
          "candidacies": {
            "type": "array",
            "items": {
              "oneOf": [
                {"$ref": "#/components/schemas/candidacy_outbound_object_get"},
                {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "received status in parameters",
                      "example": "apply"
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "candidacy_status_object": {
        "type": "object",
        "title": "Candidacy Status Object",
        "properties": {
          "status": {"$ref": "#/components/schemas/candidacy_status"},
          "changed_by": {
            "type": "string",
            "example": 123456,
            "description": "external user id of actor"
          },
          "changed_by_user_data": {"$ref": "#/components/schemas/basic_user_object"},
          "description": {"type": "string"},
          "free_text": {"type": "string"},
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "candidacy_status_object_get": {
        "type": "object",
        "title": "Candidacy Status Object",
        "properties": {
          "status": {"$ref": "#/components/schemas/candidacy_status"}
        }
      },
      "candidacy_status": {
        "type": "string",
        "title": "Candidacy Status",
        "enum": [
          "apply",
          "match",
          "reject",
          "invited-to-interview",
          "interview",
          "on-hold",
          "advanced",
          "phone-approach",
          "email-approach",
          "offer",
          "hired",
          "withdrew"
        ]
      },
      "basic_user_object": {
        "type": "object",
        "title": "Basic User Data",
        "required": [
          "first_name",
          "last_name",
          "email"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@gloat.com"
          }
        }
      },
      "job_object": {
        "type": "object",
        "required": [
          "grade_level",
          "job_id",
          "status",
          "title"
        ],
        "properties": {
          "grade_level": {"type": "string"},
          "job_id": {"type": "string"},
          "status": {"$ref": "#/components/schemas/job_status"},
          "title": {"type": "string"},
          "description": {"type": "string"},
          "description_html": {"type": "string"},
          "department_id": {"type": "string"},
          "departments": {
            "type": "array",
            "items": {"type": "string"}
          },
          "experiences": {
            "type": "array",
            "items": {"type": "string"}
          },
          "function": {"type": "string"},
          "sub_function": {"type": "string"},
          "business_unit": {"type": "string"},
          "job_code": {"type": "string"},
          "job_family": {"type": "string"},
          "languages": {"$ref": "#/components/schemas/language_array"},
          "location_type": {"$ref": "#/components/schemas/job_location_type"},
          "locations": {"$ref": "#/components/schemas/location_array"},
          "persons": {"$ref": "#/components/schemas/person_array"},
          "requirements": {"type": "string"},
          "sites": {
            "type": "array",
            "items": {"type": "string"}
          },
          "translations": {"$ref": "#/components/schemas/translation_dict"},
          "unposting_date": {"type": "string"},
          "extra_data": {
            "type": "object",
            "properties": {}
          },
          "ats_links": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "job_structure_object": {
        "type": "object",
        "required": [
          "title",
          "status"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Eye Care Professional"
          },
          "status": {"$ref": "#/components/schemas/job_structure_status"},
          "language": {
            "type": "string",
            "example": "en"
          },
          "business_title": {"type": "string"},
          "code": {"type": "string"},
          "family": {"type": "string"},
          "grade_level": {"type": "string"},
          "salary_level": {"type": "string"},
          "description": {"type": "string"},
          "expected_skills": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/skill"}
          },
          "extra_data": {
            "type": "object",
            "properties": {},
            "example": {"extra_field": "extra_value"}
          },
          "is_promoted_title": {"type": "boolean"}
        }
      },
      "job_structure_status": {
        "title": "Job Structure Status",
        "example": "AC",
        "description": "Job Structure Status:\n * `AC` - active\n * `IN` - inactive\n"
      },
      "job_patch_object": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "status": {"$ref": "#/components/schemas/job_status"}
        }
      },
      "job_status": {
        "type": "string",
        "enum": [
          "OP",
          "CL",
          "CA",
          "PE"
        ],
        "description": "Job status:\n  * `OP` - open\n  * `PE` - pending\n  * `CL` - closed\n  * `CA` - closed for applications (invisible for imob)\n"
      },
      "job_location_type": {
        "type": "string",
        "enum": [
          "GLOBAL",
          "LOCAL",
          "LOCAL_WITH_RELOCATION"
        ]
      },
      "role_simple": {
        "type": "object",
        "title": "Job/Requisition Basic Fields",
        "properties": {
          "role_id": {
            "type": "string",
            "example": "1231231"
          },
          "title": {
            "type": "string",
            "example": "Ophthalmologist"
          },
          "description": {
            "type": "string",
            "example": "Perform medical and surgical treatments for eye conditions"
          },
          "locations": {"$ref": "#/components/schemas/location_array"},
          "languages": {"$ref": "#/components/schemas/language_array"},
          "link": {
            "type": "string",
            "example": "www.eyecare.com/eyes/Ophthalmologist"
          },
          "project": {"$ref": "#/components/schemas/project"}
        }
      },
      "job_simple": {
        "type": "object",
        "title": "Job/Requisition Basic Fields",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "123123"
          },
          "title": {
            "type": "string",
            "example": "Eye Care Professional"
          },
          "description": {
            "type": "string",
            "example": "Examine, diagnose, and treat patients eyes."
          },
          "locations": {"$ref": "#/components/schemas/location_array"},
          "languages": {"$ref": "#/components/schemas/language_array"},
          "link": {
            "type": "string",
            "example": "www.jobs.com/eye_care_professional"
          }
        }
      },
      "project": {
        "type": "object",
        "title": "Project",
        "properties": {
          "id": {
            "type": "integer",
            "example": 12345
          },
          "name": {
            "type": "string",
            "example": "Sore eye treatment"
          },
          "owner_user_id": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "project_object": {
        "type": "object",
        "title": "Project",
        "required": [
          "project_id",
          "vendor",
          "status",
          "startDate",
          "endDate",
          "owners"
        ],
        "properties": {
          "project_id": {"type": "string"},
          "vendor": {
            "type": "string",
            "example": "Naama Industries"
          },
          "coverImage": {"type": "string"},
          "locationLimitation": {"type": "string"},
          "startDate": {"type": "string"},
          "endDate": {"type": "string"},
          "impact": {"type": "string"},
          "title": {"type": "string"},
          "name": {"type": "string"},
          "owners": {"$ref": "#/components/schemas/owners_array"},
          "locations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "city": {"type": "string"},
                "country_code": {"type": "string"},
                "state": {"type": "string"}
              }
            }
          },
          "sites": {
            "type": "array",
            "items": {"type": "string"}
          },
          "businessImpact": {
            "type": "object",
            "properties": {
              "value": {"type": "string"},
              "label": {"type": "string"}
            }
          },
          "description": {"type": "string"},
          "status": {"$ref": "#/components/schemas/job_status"}
        }
      },
      "job_detail_object": {
        "type": "object",
        "properties": {
          "jobs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "projectId": {"type": "string"},
                "description": {"type": "string"},
                "locations": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "provider": {"type": "string"},
                      "name": {"type": "string"},
                      "id": {"type": "string"},
                      "country": {"type": "string"},
                      "displayName": {"type": "string"}
                    }
                  }
                },
                "locationLimitation": {"type": "string"},
                "skills": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "integer"},
                      "name": {"type": "string"},
                      "language": {"type": "string"}
                    }
                  }
                },
                "experiences": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "integer"},
                      "name": {"type": "string"}
                    }
                  }
                },
                "link": {"type": "string"},
                "status": {"type": "string"},
                "title": {"type": "string"},
                "dateCreated": {"type": "string"},
                "descriptionHtml": {"type": "string"}
              }
            }
          }
        }
      },
      "project_role_object": {
        "type": "object",
        "required": [
          "project_id",
          "job_id",
          "status"
        ],
        "properties": {
          "project_id": {"type": "string"},
          "job_id": {"type": "string"},
          "status": {"$ref": "#/components/schemas/job_status"},
          "title": {"type": "string"},
          "description": {"type": "string"},
          "description_html": {"type": "string"},
          "department_id": {"type": "string"},
          "departments": {
            "type": "array",
            "items": {"type": "string"}
          },
          "experiences": {
            "type": "array",
            "items": {"type": "string"}
          },
          "function": {"type": "string"},
          "sub_function": {"type": "string"},
          "business_unit": {"type": "string"},
          "job_code": {"type": "string"},
          "job_family": {"type": "string"},
          "languages": {"$ref": "#/components/schemas/language_array"},
          "location_type": {"$ref": "#/components/schemas/job_location_type"},
          "locations": {"$ref": "#/components/schemas/location_array"},
          "sites": {
            "type": "array",
            "items": {"type": "string"}
          },
          "translations": {"$ref": "#/components/schemas/translation_array"},
          "unposting_date": {"type": "string"}
        }
      },
      "job_response": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "created": {
            "type": "number",
            "example": 15
          }
        }
      },
      "job_structure_response": {
        "type": "object",
        "properties": {
          "success": {"type": "boolean"}
        }
      },
      "job_structure_error_response": {
        "type": "object",
        "properties": {
          "success": {"type": "boolean"},
          "error": {
            "type": "string",
            "example": "Unable to parse job structure"
          }
        }
      },
      "language_array": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "code",
            "level"
          ],
          "properties": {
            "code": {
              "type": "string",
              "example": "en",
              "description": "2 letter language code"
            },
            "level": {
              "type": "string",
              "enum": [
                "BA",
                "AD",
                "FL",
                "NL",
                "NT"
              ],
              "description": "language proficiency level:\n  * `BA` - Basic\n  * `AD` - Advanced\n  * `FL` - Fluent\n  * `NL` - Native Level\n  * `NT` - Native\n",
              "example": "BA"
            }
          }
        }
      },
      "location_array": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "city",
            "country_code"
          ],
          "properties": {
            "city": {
              "type": "string",
              "example": "Manchester"
            },
            "country_code": {
              "type": "string",
              "example": "UK"
            },
            "state": {
              "type": "string",
              "default": "",
              "example": "England"
            }
          }
        }
      },
      "owners_array": {
        "type": "array",
        "title": "Owners related to a job/project",
        "items": {
          "type": "object",
          "properties": {
            "id": {"type": "string"},
            "fullName": {"type": "string"},
            "email": {"type": "string"},
            "role": {"type": "string"}
          }
        }
      },
      "person_array": {
        "type": "array",
        "title": "Persons Related to a Job",
        "items": {
          "type": "object",
          "required": [
            "user_id",
            "email",
            "first_name",
            "last_name",
            "relation"
          ],
          "properties": {
            "user_id": {"type": "string"},
            "email": {"type": "string"},
            "first_name": {"type": "string"},
            "last_name": {"type": "string"},
            "relation": {"$ref": "#/components/schemas/job_person_relations"}
          }
        }
      },
      "job_person_relations": {
        "type": "string",
        "enum": [
          "manager",
          "hrbp",
          "coowner",
          "recruiter",
          "viewer"
        ]
      },
      "user_simple": {
        "type": "object",
        "title": "User - Simple Fields",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "123456"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "title": {
            "type": "string",
            "example": "Eye Care Professional"
          },
          "type": {
            "type": "string",
            "example": "Doctor"
          },
          "link": {
            "type": "string",
            "example": "www.twitter.com/JohnDoe"
          }
        }
      },
      "user_object": {
        "type": "object",
        "required": [
          "user_ids",
          "status",
          "first_name",
          "last_name",
          "grade_level",
          "email",
          "direct_manager_email",
          "direct_manager_id",
          "can_access_hire"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "example": "123456"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "grade_level": {
            "type": "string",
            "example": "A"
          },
          "first_name": {
            "type": "string",
            "format": "name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "status": {"$ref": "#/components/schemas/user_status"},
          "site": {
            "type": "string",
            "example": "London_cx5"
          },
          "city": {
            "type": "string",
            "example": "london"
          },
          "country_code": {
            "type": "string",
            "example": "UK"
          },
          "cluster": {"type": "string"},
          "department": {
            "type": "array",
            "items": {"type": "string"}
          },
          "department_id": {
            "type": "string",
            "example": "1234"
          },
          "function": {"type": "string"},
          "sub_function": {"type": "string"},
          "in_role_since": {
            "type": "string",
            "format": "date"
          },
          "reporting_data": {
            "type": "object",
            "properties": {}
          },
          "state": {
            "type": "string",
            "example": "london"
          },
          "business_unit": {
            "type": "string",
            "example": "main office"
          },
          "job_code": {"type": "string"},
          "job_family": {"type": "string"},
          "hrbp_id": {"type": "string"},
          "hrbp_email": {"type": "string"},
          "direct_manager_id": {"type": "string"},
          "direct_manager_email": {"type": "string"},
          "additional_managers": {
            "type": "object",
            "properties": {
              "id": {"type": "string"},
              "email": {"type": "string"}
            }
          },
          "title": {"type": "string"},
          "extra_data": {
            "type": "object",
            "properties": {}
          },
          "custom_fields": {
            "type": "object",
            "properties": {}
          },
          "can_access_hire": {
            "type": "boolean",
            "example": false
          },
          "can_be_mentor": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "user_patch_object": {
        "type": "object",
        "required": ["user_id"],
        "properties": {
          "user_id": {
            "type": "string",
            "example": "123456"
          },
          "status": {"$ref": "#/components/schemas/user_status"},
          "custom_fields": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "user_status": {
        "type": "string",
        "title": "User Status",
        "enum": [
          "AC",
          "TR",
          "AP",
          "IA",
          "SU",
          "RQ",
          "DE"
        ],
        "description": "User Status:\n * `AC` - Active\n * `TR` - Terminated\n * `IA` - Inactive\n * `SU` - Suspended\n * `AP` - Approved\n * `RQ` - Requested\n * `DE` - Deleted\n"
      },
      "user_response": {
        "type": "object",
        "properties": {
          "success": {"type": "boolean"}
        }
      },
      "user_status_response": {
        "type": "object",
        "properties": {
          "count": {"type": "number"},
          "hasMore": {"type": "boolean"},
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "user_id": {"type": "number"}
              }
            }
          }
        }
      },
      "translation_dict": {
        "type": "object",
        "items": {"type": "object"},
        "properties": {
          "en": {"$ref": "#/components/schemas/language_dict"},
          "fr": {"$ref": "#/components/schemas/language_dict"},
          "etc...": {"$ref": "#/components/schemas/language_dict"}
        }
      },
      "translation_array": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "language",
            "title",
            "description"
          ],
          "properties": {
            "language": {
              "type": "string",
              "example": "en"
            },
            "title": {
              "type": "string",
              "example": "Software Developer"
            },
            "description": {"type": "string"},
            "description_html": {"type": "string"}
          }
        }
      },
      "search_response": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "properties": {
              "jobs": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/job_simple"}
              },
              "roles": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/role_simple"}
              },
              "users": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/user_simple"}
              }
            }
          }
        }
      },
      "user_skills": {
        "type": "object",
        "properties": {
          "user_id_or_email": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/skill"}
          }
        }
      },
      "skill": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Management"
          },
          "language": {
            "type": "string",
            "example": "en"
          }
        }
      },
      "post_skill": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "names": {
            "type": "object",
            "properties": {
              "en": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "skill_name"
                }
              }
            }
          }
        }
      },
      "skill_for_all_ontologies": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "gloat": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "language": {"type": "string"}
              }
            },
            "external_ontology": {
              "type": "object",
              "properties": {
                "id": {"type": "string"},
                "name": {"type": "string"},
                "language": {"type": "string"}
              }
            }
          }
        }
      },
      "learning_item": {
        "type": "object",
        "required": [
          "vendor",
          "link",
          "item_id",
          "title",
          "description_html",
          "language"
        ],
        "properties": {
          "vendor": {
            "type": "string",
            "example": "vendor_name"
          },
          "link": {
            "type": "string",
            "example": "https://www.youtube.com/watch?v=rfscVS0vtbw"
          },
          "item_id": {
            "type": "string",
            "example": "yu123"
          },
          "title": {
            "type": "string",
            "example": "Python Course"
          },
          "description_html": {
            "type": "string",
            "example": "In this course, you will learn Python. It is expected that you're proficient in at least one other programming language."
          },
          "language": {
            "type": "string",
            "example": "en",
            "description": "Language for fields: link, title, description, item_image, item_video"
          },
          "item_source": {
            "type": "string",
            "example": "youtube"
          },
          "status": {
            "type": "string",
            "example": "OP",
            "default": "OP",
            "description": "Learning Item Status:\n * `OP` - Open\n * `CL` - Closed\n"
          },
          "type": {
            "type": "string",
            "example": "CS",
            "default": "NO",
            "description": "Learning Item Type:\n * `NO` - Unknown\n * `CS` - Course\n * `CL` - Curriculum\n * `AR` - Article\n * `BO` - Book\n * `VI` - Video\n * `AS` - Assessment\n * `PO` - Podcast\n * `PA` - Pathway\n * `PL` - Plans\n * `JO` - Journey\n"
          },
          "level": {
            "type": "string",
            "example": "Beginner"
          },
          "category": {
            "type": "string",
            "example": "Programming languages"
          },
          "item_image": {
            "type": "string",
            "example": "https://i.ytimg.com/an_webp/b093aqAZiPU/mqdefault_6s.webp?du=3000&sqp=CMiz_o8G&rs=AOn4CLAxnZ_NUoo3aLsjHxM2Ued9B0xD0w"
          },
          "item_video": {
            "type": "string",
            "example": ""
          },
          "duration": {
            "type": "integer",
            "example": 302,
            "description": "Duration in seconds"
          },
          "item_rating": {
            "type": "integer",
            "example": 90
          },
          "prerequisites": {
            "type": "string",
            "example": "databases"
          },
          "created_at": {
            "type": "string",
            "example": "2020-11-17T11:30:45.000Z"
          },
          "languages": {
            "type": "array",
            "items": {"type": "string"},
            "example": "[\"en\", \"pt\"]",
            "description": "Languages on which the learning item is suggested"
          },
          "compatibility": {
            "type": "array",
            "items": {"type": "string"},
            "example": "[\"desktop\", \"mobile\"]"
          },
          "related_labels_and_tags": {
            "type": "array",
            "description": "Array of labels and tags objects which related to learning oppourtunity",
            "items": {"$ref": "#/components/schemas/related_learning"}
          },
          "related_skills": {
            "type": "array",
            "description": "Array of skills objects which related to learning oppourtunity",
            "items": {"$ref": "#/components/schemas/related_learning"}
          },
          "related_items_id": {
            "type": "array",
            "description": "Array of learning items objects which related to learning oppourtunity",
            "items": {"$ref": "#/components/schemas/related_learning"}
          },
          "translations": {
            "type": "object",
            "description": "translations for learning presentative data. key- language code, value- translation object",
            "properties": {
              "lang_code_key": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string",
                    "example": "https://www.youtube.com/watch?v=rfscVS0vtbw/es"
                  },
                  "title": {
                    "type": "string",
                    "example": "Curso de Python"
                  },
                  "description": {
                    "type": "string",
                    "example": "En este curso, aprenderĂĄ Python. Se espera que domines al menos otro lenguaje de programaciĂłn."
                  },
                  "item_image": {
                    "type": "string",
                    "example": "https://i.ytimg.com/an_webp/b093aqAZiPU/mqdefault_6s.webp?du=3000&sqp=CMiz_o8G&rs=AOn4CLAxnZ_NUoo3aLsjHxM2Ued9B0xD0w"
                  },
                  "item_video": {
                    "type": "string",
                    "example": ""
                  },
                  "related_skills": {
                    "type": "array",
                    "items": {"$ref": "#/components/schemas/related_learning"}
                  }
                }
              }
            }
          },
          "extra_info": {
            "type": "object",
            "description": "if the learning item is of type pathway, this field will contain all the pathway steps",
            "properties": {}
          }
        }
      },
      "related_learning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "id123"
          },
          "name": {
            "type": "string",
            "example": "name"
          }
        }
      },
      "training": {
        "type": "object",
        "required": [
          "user_id",
          "course_name",
          "start_date"
        ],
        "properties": {
          "course_name": {
            "type": "string",
            "example": "Python"
          },
          "start_date": {
            "type": "string",
            "example": "2020-05-28"
          },
          "end_date": {
            "type": "string",
            "example": "2020-12-30"
          },
          "institution": {
            "type": "string",
            "example": "udemy"
          },
          "type": {
            "type": "string",
            "example": "online"
          }
        }
      },
      "rbac_role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2
          },
          "name": {
            "type": "string",
            "example": "Core team"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["admin"]
            },
            "example": ["admin"]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "A",
                  "description": "Permission type:\n * `A` - Authorized (Read & Write)\n * `R` - Read\n * `W` - Write\n"
                },
                "name": {
                  "type": "string",
                  "example": "Allow users to manage role assignments"
                }
              }
            }
          },
          "description": {
            "type": "string",
            "example": "Organizational operational team with the highest level of permissions"
          }
        }
      },
      "user_role_assignment": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "101123"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1234
                },
                "name": {
                  "type": "string",
                  "example": "sso permission"
                },
                "granted_group": {
                  "type": "number",
                  "description": "id of the granted group",
                  "example": 422
                },
                "target_group": {
                  "type": "number",
                  "description": "id of the target group",
                  "example": 224
                }
              }
            }
          },
          "lastLogin": {
            "type": "number",
            "description": "last login in epoch",
            "example": 1667128217
          },
          "status": {
            "type": "string",
            "description": "User Status:\n * `AC` - Active\n * `TR` - Terminated\n * `IA` - Inactive\n * `SU` - Suspended\n * `AP` - Approved\n * `RQ` - Requested\n * `DE` - Deleted\n",
            "example": "AP"
          }
        }
      },
      "user_roles_and_groups": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "example": "101123"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 1234
                },
                "target_groups": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "id of the target groups",
                    "example": 117
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "X-Gloat-API-Key",
        "in": "header"
      }
    }
  }
}